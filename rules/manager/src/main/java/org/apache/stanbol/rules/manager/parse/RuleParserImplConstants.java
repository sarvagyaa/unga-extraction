/* Generated By:JavaCC: Do not edit this line. RuleParserImplConstants.java */
package org.apache.stanbol.rules.manager.parse;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface RuleParserImplConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LARROW = 8;
  /** RegularExpression Id. */
  int COLON = 9;
  /** RegularExpression Id. */
  int EQUAL = 10;
  /** RegularExpression Id. */
  int AND = 11;
  /** RegularExpression Id. */
  int COMMA = 12;
  /** RegularExpression Id. */
  int SAME = 13;
  /** RegularExpression Id. */
  int DIFFERENT = 14;
  /** RegularExpression Id. */
  int LESSTHAN = 15;
  /** RegularExpression Id. */
  int GREATERTHAN = 16;
  /** RegularExpression Id. */
  int LESSEQUALTHAN = 17;
  /** RegularExpression Id. */
  int GREATEREQUALTHAN = 18;
  /** RegularExpression Id. */
  int IS = 19;
  /** RegularExpression Id. */
  int NEW_IRI = 20;
  /** RegularExpression Id. */
  int NEW_LITERAL = 21;
  /** RegularExpression Id. */
  int LENGTH = 22;
  /** RegularExpression Id. */
  int SUBSTRING = 23;
  /** RegularExpression Id. */
  int UPPERCASE = 24;
  /** RegularExpression Id. */
  int LOWERCASE = 25;
  /** RegularExpression Id. */
  int STARTS_WITH = 26;
  /** RegularExpression Id. */
  int ENDS_WITH = 27;
  /** RegularExpression Id. */
  int LET = 28;
  /** RegularExpression Id. */
  int CONCAT = 29;
  /** RegularExpression Id. */
  int HAS = 30;
  /** RegularExpression Id. */
  int VALUES = 31;
  /** RegularExpression Id. */
  int NOTEX = 32;
  /** RegularExpression Id. */
  int PLUS = 33;
  /** RegularExpression Id. */
  int MINUS = 34;
  /** RegularExpression Id. */
  int MULTIPLIED = 35;
  /** RegularExpression Id. */
  int DIVIDED = 36;
  /** RegularExpression Id. */
  int NOT = 37;
  /** RegularExpression Id. */
  int NAMESPACE = 38;
  /** RegularExpression Id. */
  int LOCALNAME = 39;
  /** RegularExpression Id. */
  int STR = 40;
  /** RegularExpression Id. */
  int APOX = 41;
  /** RegularExpression Id. */
  int UNION = 42;
  /** RegularExpression Id. */
  int CREATE_LABEL = 43;
  /** RegularExpression Id. */
  int PROP = 44;
  /** RegularExpression Id. */
  int IS_BLANK = 45;
  /** RegularExpression Id. */
  int LPAR = 46;
  /** RegularExpression Id. */
  int RPAR = 47;
  /** RegularExpression Id. */
  int DQUOT = 48;
  /** RegularExpression Id. */
  int LQUAD = 49;
  /** RegularExpression Id. */
  int RQUAD = 50;
  /** RegularExpression Id. */
  int NUM = 51;
  /** RegularExpression Id. */
  int VAR = 52;
  /** RegularExpression Id. */
  int VARIABLE = 53;
  /** RegularExpression Id. */
  int URI = 54;
  /** RegularExpression Id. */
  int STRING = 55;
  /** RegularExpression Id. */
  int BNODE = 56;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int WithinComment = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 7>",
    "\"->\"",
    "\":\"",
    "\"=\"",
    "\".\"",
    "\",\"",
    "\"same\"",
    "\"different\"",
    "\"lt\"",
    "\"gt\"",
    "\"leq\"",
    "\"geq\"",
    "\"is\"",
    "\"newIRI\"",
    "\"newLiteral\"",
    "\"length\"",
    "\"substring\"",
    "\"upperCase\"",
    "\"lowerCase\"",
    "\"startsWith\"",
    "\"endsWith\"",
    "\"let\"",
    "\"concat\"",
    "\"has\"",
    "\"values\"",
    "\"notex\"",
    "\"sum\"",
    "\"sub\"",
    "\"mult\"",
    "\"div\"",
    "\"not\"",
    "\"namespace\"",
    "\"localname\"",
    "\"str\"",
    "\"^\"",
    "\"union\"",
    "\"createLabel\"",
    "\"prop\"",
    "\"isBlank\"",
    "\"(\"",
    "\")\"",
    "\"\\\"\"",
    "\"[\"",
    "\"]\"",
    "<NUM>",
    "<VAR>",
    "<VARIABLE>",
    "<URI>",
    "<STRING>",
    "<BNODE>",
  };

}
