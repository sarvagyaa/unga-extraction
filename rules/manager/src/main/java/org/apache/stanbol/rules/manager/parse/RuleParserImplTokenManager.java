/* Generated By:JavaCC: Do not edit this line. RuleParserImplTokenManager.java */
package org.apache.stanbol.rules.manager.parse;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import org.apache.clerezza.commons.rdf.IRI;
import org.apache.stanbol.rules.base.api.Rule;
import org.apache.stanbol.rules.base.api.RuleAtom;
import org.apache.stanbol.rules.base.api.util.AtomList;
import org.apache.stanbol.rules.manager.KB;
import org.apache.stanbol.rules.manager.RuleImpl;
import org.apache.stanbol.rules.manager.atoms.ClassAtom;
import org.apache.stanbol.rules.manager.atoms.ComparisonAtom;
import org.apache.stanbol.rules.manager.atoms.ConcatAtom;
import org.apache.stanbol.rules.manager.atoms.CreateLabelAtom;
import org.apache.stanbol.rules.manager.atoms.DatavaluedPropertyAtom;
import org.apache.stanbol.rules.manager.atoms.DifferentAtom;
import org.apache.stanbol.rules.manager.atoms.DivisionAtom;
import org.apache.stanbol.rules.manager.atoms.EndsWithAtom;
import org.apache.stanbol.rules.manager.atoms.ExpressionAtom;
import org.apache.stanbol.rules.manager.atoms.GreaterEqualThanAtom;
import org.apache.stanbol.rules.manager.atoms.GreaterThanAtom;
import org.apache.stanbol.rules.manager.atoms.IObjectAtom;
import org.apache.stanbol.rules.manager.atoms.IndividualPropertyAtom;
import org.apache.stanbol.rules.manager.atoms.IsBlankAtom;
import org.apache.stanbol.rules.manager.atoms.LengthAtom;
import org.apache.stanbol.rules.manager.atoms.LessEqualThanAtom;
import org.apache.stanbol.rules.manager.atoms.LessThanAtom;
import org.apache.stanbol.rules.manager.atoms.LetAtom;
import org.apache.stanbol.rules.manager.atoms.LocalNameAtom;
import org.apache.stanbol.rules.manager.atoms.LowerCaseAtom;
import org.apache.stanbol.rules.manager.atoms.MultiplicationAtom;
import org.apache.stanbol.rules.manager.atoms.NamespaceAtom;
import org.apache.stanbol.rules.manager.atoms.NewIRIAtom;
import org.apache.stanbol.rules.manager.atoms.NewLiteralAtom;
import org.apache.stanbol.rules.manager.atoms.NotAtom;
import org.apache.stanbol.rules.manager.atoms.NumberAtom;
import org.apache.stanbol.rules.manager.atoms.NumericFunctionAtom;
import org.apache.stanbol.rules.manager.atoms.NumericVariableAtom;
import org.apache.stanbol.rules.manager.atoms.PropStringAtom;
import org.apache.stanbol.rules.manager.atoms.ResourceAtom;
import org.apache.stanbol.rules.manager.atoms.RuleBlankNode;
import org.apache.stanbol.rules.manager.atoms.SameAtom;
import org.apache.stanbol.rules.manager.atoms.StartsWithAtom;
import org.apache.stanbol.rules.manager.atoms.StrAtom;
import org.apache.stanbol.rules.manager.atoms.StringAtom;
import org.apache.stanbol.rules.manager.atoms.StringFunctionAtom;
import org.apache.stanbol.rules.manager.atoms.StringVariableAtom;
import org.apache.stanbol.rules.manager.atoms.SubstringAtom;
import org.apache.stanbol.rules.manager.atoms.SubtractionAtom;
import org.apache.stanbol.rules.manager.atoms.SumAtom;
import org.apache.stanbol.rules.manager.atoms.TypedLiteralAtom;
import org.apache.stanbol.rules.manager.atoms.UnionAtom;
import org.apache.stanbol.rules.manager.atoms.UpperCaseAtom;
import org.apache.stanbol.rules.manager.atoms.VariableAtom;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Resource;

/** Token Manager. */
public class RuleParserImplTokenManager implements RuleParserImplConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3dffffffe100L) != 0L)
         {
            jjmatchedKind = 52;
            return 1;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 8;
         if ((active0 & 0x800L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active0 & 0x1dfffff66000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x200000098000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x3cc8af706000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 2;
            }
            return 1;
         }
         if ((active0 & 0x13750860000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x2cc1aff04000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x100800002000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x40100000000L) != 0L)
            return 1;
         if ((active0 & 0x28c0aff04000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0xa0500000L) != 0L)
            return 1;
         if ((active0 & 0x28c00fa04000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000000000L) != 0L)
            return 1;
         if ((active0 & 0x8c00fa04000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000L) != 0L)
            return 1;
         if ((active0 & 0x8c007a04000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0xc003804000L) != 0L)
            return 1;
         if ((active0 & 0x80004200000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x4200000L) != 0L)
            return 1;
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 48, 8);
      case 40:
         return jjStopAtPos(0, 46);
      case 41:
         return jjStopAtPos(0, 47);
      case 44:
         return jjStopAtPos(0, 12);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 46:
         return jjStartNfaWithStates_0(0, 11, 1);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 58:
         return jjStopAtPos(0, 9);
      case 61:
         return jjStopAtPos(0, 10);
      case 91:
         return jjStopAtPos(0, 49);
      case 93:
         return jjStopAtPos(0, 50);
      case 94:
         return jjStopAtPos(0, 41);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80020000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000004000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x50000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000080000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8012428000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x6100300000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10604802000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x40001000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 62:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c0002000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10760000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000004000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40008000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xa122000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000000000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 1);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(1, 16, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x10004000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0xe00800000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 98:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x880000000L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000002000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x20400000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 113:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 1);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 1);
         break;
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 1);
         break;
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 1);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(2, 28, 1);
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 118:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 1);
         break;
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x2300000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x88000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4103000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 112:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8800000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 87:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200020000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x80004000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x80004c00000L);
      case 120:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000000L);
      case 73:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 104:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x208000000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x804000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 87:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xc003000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x204000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 107:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L);
      case 104:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 27, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x804000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(8, 24, 1);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(8, 25, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 1);
         break;
      case 103:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 23, 1);
         break;
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L);
      case 104:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 1);
         break;
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 43, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(8);
                  else if (curChar == 60)
                     jjCheckNAdd(5);
                  else if (curChar == 63)
                     jjCheckNAdd(3);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 60)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x7ffe33800000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 62)
                     kind = 54;
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x87ffe03b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 10:
                  if (curChar == 58)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(1);
                  }
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 8:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     jjAddStates(2, 3);
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 12:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   5, 6, 8, 9, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\55\76", "\72", "\75", "\56", 
"\54", "\163\141\155\145", "\144\151\146\146\145\162\145\156\164", "\154\164", 
"\147\164", "\154\145\161", "\147\145\161", "\151\163", "\156\145\167\111\122\111", 
"\156\145\167\114\151\164\145\162\141\154", "\154\145\156\147\164\150", "\163\165\142\163\164\162\151\156\147", 
"\165\160\160\145\162\103\141\163\145", "\154\157\167\145\162\103\141\163\145", 
"\163\164\141\162\164\163\127\151\164\150", "\145\156\144\163\127\151\164\150", "\154\145\164", 
"\143\157\156\143\141\164", "\150\141\163", "\166\141\154\165\145\163", "\156\157\164\145\170", 
"\163\165\155", "\163\165\142", "\155\165\154\164", "\144\151\166", "\156\157\164", 
"\156\141\155\145\163\160\141\143\145", "\154\157\143\141\154\156\141\155\145", "\163\164\162", "\136", 
"\165\156\151\157\156", "\143\162\145\141\164\145\114\141\142\145\154", "\160\162\157\160", 
"\151\163\102\154\141\156\153", "\50", "\51", "\42", "\133", "\135", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "WithinComment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffffffffff01L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static final long[] jjtoMore = {
   0x80L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[13];
private final int[] jjstateSet = new int[26];
protected char curChar;
/** Constructor. */
public RuleParserImplTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public RuleParserImplTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 13; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 7)
         {
            jjmatchedKind = 7;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
